//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace CherwellXdsIntegrator.CherwellAPI {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="apiSoap", Namespace="http://cherwellsoftware.com")]
    public partial class api : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback PortalLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback MobileLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginWithProductCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback MobileLogoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetiCherwellCredentialsModeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastErrorOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastError2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBusinessObjectDefinitionOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryByFieldValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryByStoredQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryByStoredQueryWithScopeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBusinessObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBusinessObjectByPublicIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateBusinessObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateBusinessObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateBusinessObjectByPublicIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetApiVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConfirmLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTabBarOptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMruForObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearMruForObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetItemListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetItemListWithParentInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDashboardOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDashboardWithSizesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDashboardViewModelsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDashboardDrillDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueryResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueryResultsUsingPromptInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultsListWidgetRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetItemDisplayHtmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunOneStepOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunOneStepByPublicIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPromptsForOneStepOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPromptsForOneStepByPublicIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetParametersForActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback LookupScanCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryForWidgetDataAtPosOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAttachmentsForBusinessObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAttachmentToRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryForWidgetDataAtPosWithSizesOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryForWidgetImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryForWidgetImageWithSizesOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryForWidgetViewModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuickSearchOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public api() {
            this.Url = global::CherwellXdsIntegrator.Properties.Settings.Default.CherwellXdsIntegrator_CherwellAPI_api;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event PortalLoginCompletedEventHandler PortalLoginCompleted;
        
        /// <remarks/>
        public event MobileLoginCompletedEventHandler MobileLoginCompleted;
        
        /// <remarks/>
        public event LoginWithProductCodeCompletedEventHandler LoginWithProductCodeCompleted;
        
        /// <remarks/>
        public event LogoutCompletedEventHandler LogoutCompleted;
        
        /// <remarks/>
        public event MobileLogoutCompletedEventHandler MobileLogoutCompleted;
        
        /// <remarks/>
        public event GetiCherwellCredentialsModeCompletedEventHandler GetiCherwellCredentialsModeCompleted;
        
        /// <remarks/>
        public event GetServiceInfoCompletedEventHandler GetServiceInfoCompleted;
        
        /// <remarks/>
        public event GetLastErrorCompletedEventHandler GetLastErrorCompleted;
        
        /// <remarks/>
        public event GetLastError2CompletedEventHandler GetLastError2Completed;
        
        /// <remarks/>
        public event GetBusinessObjectDefinitionCompletedEventHandler GetBusinessObjectDefinitionCompleted;
        
        /// <remarks/>
        public event QueryByFieldValueCompletedEventHandler QueryByFieldValueCompleted;
        
        /// <remarks/>
        public event QueryByStoredQueryCompletedEventHandler QueryByStoredQueryCompleted;
        
        /// <remarks/>
        public event QueryByStoredQueryWithScopeCompletedEventHandler QueryByStoredQueryWithScopeCompleted;
        
        /// <remarks/>
        public event GetBusinessObjectCompletedEventHandler GetBusinessObjectCompleted;
        
        /// <remarks/>
        public event GetBusinessObjectByPublicIdCompletedEventHandler GetBusinessObjectByPublicIdCompleted;
        
        /// <remarks/>
        public event CreateBusinessObjectCompletedEventHandler CreateBusinessObjectCompleted;
        
        /// <remarks/>
        public event UpdateBusinessObjectCompletedEventHandler UpdateBusinessObjectCompleted;
        
        /// <remarks/>
        public event UpdateBusinessObjectByPublicIdCompletedEventHandler UpdateBusinessObjectByPublicIdCompleted;
        
        /// <remarks/>
        public event GetApiVersionCompletedEventHandler GetApiVersionCompleted;
        
        /// <remarks/>
        public event ConfirmLoginCompletedEventHandler ConfirmLoginCompleted;
        
        /// <remarks/>
        public event GetTabBarOptionsCompletedEventHandler GetTabBarOptionsCompleted;
        
        /// <remarks/>
        public event GetMruForObjectCompletedEventHandler GetMruForObjectCompleted;
        
        /// <remarks/>
        public event ClearMruForObjectCompletedEventHandler ClearMruForObjectCompleted;
        
        /// <remarks/>
        public event GetItemListCompletedEventHandler GetItemListCompleted;
        
        /// <remarks/>
        public event GetItemListWithParentInfoCompletedEventHandler GetItemListWithParentInfoCompleted;
        
        /// <remarks/>
        public event GetDashboardCompletedEventHandler GetDashboardCompleted;
        
        /// <remarks/>
        public event GetDashboardWithSizesCompletedEventHandler GetDashboardWithSizesCompleted;
        
        /// <remarks/>
        public event GetDashboardViewModelsCompletedEventHandler GetDashboardViewModelsCompleted;
        
        /// <remarks/>
        public event GetDashboardDrillDownCompletedEventHandler GetDashboardDrillDownCompleted;
        
        /// <remarks/>
        public event GetQueryResultsCompletedEventHandler GetQueryResultsCompleted;
        
        /// <remarks/>
        public event GetQueryResultsUsingPromptInfoCompletedEventHandler GetQueryResultsUsingPromptInfoCompleted;
        
        /// <remarks/>
        public event GetResultsListWidgetRecordsCompletedEventHandler GetResultsListWidgetRecordsCompleted;
        
        /// <remarks/>
        public event GetItemDisplayHtmlCompletedEventHandler GetItemDisplayHtmlCompleted;
        
        /// <remarks/>
        public event RunOneStepCompletedEventHandler RunOneStepCompleted;
        
        /// <remarks/>
        public event RunOneStepByPublicIdCompletedEventHandler RunOneStepByPublicIdCompleted;
        
        /// <remarks/>
        public event GetPromptsForOneStepCompletedEventHandler GetPromptsForOneStepCompleted;
        
        /// <remarks/>
        public event GetPromptsForOneStepByPublicIdCompletedEventHandler GetPromptsForOneStepByPublicIdCompleted;
        
        /// <remarks/>
        public event GetParametersForActionCompletedEventHandler GetParametersForActionCompleted;
        
        /// <remarks/>
        public event ExecuteActionCompletedEventHandler ExecuteActionCompleted;
        
        /// <remarks/>
        public event LookupScanCodeCompletedEventHandler LookupScanCodeCompleted;
        
        /// <remarks/>
        public event GetImagesCompletedEventHandler GetImagesCompleted;
        
        /// <remarks/>
        public event QueryForWidgetDataAtPosCompletedEventHandler QueryForWidgetDataAtPosCompleted;
        
        /// <remarks/>
        public event GetAttachmentsForBusinessObjectCompletedEventHandler GetAttachmentsForBusinessObjectCompleted;
        
        /// <remarks/>
        public event GetAttachmentCompletedEventHandler GetAttachmentCompleted;
        
        /// <remarks/>
        public event AddAttachmentToRecordCompletedEventHandler AddAttachmentToRecordCompleted;
        
        /// <remarks/>
        public event QueryForWidgetDataAtPosWithSizesCompletedEventHandler QueryForWidgetDataAtPosWithSizesCompleted;
        
        /// <remarks/>
        public event QueryForWidgetImageCompletedEventHandler QueryForWidgetImageCompleted;
        
        /// <remarks/>
        public event QueryForWidgetImageWithSizesCompletedEventHandler QueryForWidgetImageWithSizesCompleted;
        
        /// <remarks/>
        public event QueryForWidgetViewModelCompletedEventHandler QueryForWidgetViewModelCompleted;
        
        /// <remarks/>
        public event QuickSearchCompletedEventHandler QuickSearchCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/Login", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Login(string userId, string password) {
            object[] results = this.Invoke("Login", new object[] {
                        userId,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string userId, string password) {
            this.LoginAsync(userId, password, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string userId, string password, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        userId,
                        password}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/PortalLogin", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PortalLogin(string userId, string password, bool useSAML) {
            object[] results = this.Invoke("PortalLogin", new object[] {
                        userId,
                        password,
                        useSAML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PortalLoginAsync(string userId, string password, bool useSAML) {
            this.PortalLoginAsync(userId, password, useSAML, null);
        }
        
        /// <remarks/>
        public void PortalLoginAsync(string userId, string password, bool useSAML, object userState) {
            if ((this.PortalLoginOperationCompleted == null)) {
                this.PortalLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPortalLoginOperationCompleted);
            }
            this.InvokeAsync("PortalLogin", new object[] {
                        userId,
                        password,
                        useSAML}, this.PortalLoginOperationCompleted, userState);
        }
        
        private void OnPortalLoginOperationCompleted(object arg) {
            if ((this.PortalLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PortalLoginCompleted(this, new PortalLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/MobileLogin", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MobileLogin(string userId, string password, string version, string sessionId, string preferences, bool useSAML) {
            object[] results = this.Invoke("MobileLogin", new object[] {
                        userId,
                        password,
                        version,
                        sessionId,
                        preferences,
                        useSAML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MobileLoginAsync(string userId, string password, string version, string sessionId, string preferences, bool useSAML) {
            this.MobileLoginAsync(userId, password, version, sessionId, preferences, useSAML, null);
        }
        
        /// <remarks/>
        public void MobileLoginAsync(string userId, string password, string version, string sessionId, string preferences, bool useSAML, object userState) {
            if ((this.MobileLoginOperationCompleted == null)) {
                this.MobileLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMobileLoginOperationCompleted);
            }
            this.InvokeAsync("MobileLogin", new object[] {
                        userId,
                        password,
                        version,
                        sessionId,
                        preferences,
                        useSAML}, this.MobileLoginOperationCompleted, userState);
        }
        
        private void OnMobileLoginOperationCompleted(object arg) {
            if ((this.MobileLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MobileLoginCompleted(this, new MobileLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/LoginWithProductCode", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LoginWithProductCode(string userId, string password, string productCode, string module, string sessionId, bool useSAML) {
            object[] results = this.Invoke("LoginWithProductCode", new object[] {
                        userId,
                        password,
                        productCode,
                        module,
                        sessionId,
                        useSAML});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LoginWithProductCodeAsync(string userId, string password, string productCode, string module, string sessionId, bool useSAML) {
            this.LoginWithProductCodeAsync(userId, password, productCode, module, sessionId, useSAML, null);
        }
        
        /// <remarks/>
        public void LoginWithProductCodeAsync(string userId, string password, string productCode, string module, string sessionId, bool useSAML, object userState) {
            if ((this.LoginWithProductCodeOperationCompleted == null)) {
                this.LoginWithProductCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginWithProductCodeOperationCompleted);
            }
            this.InvokeAsync("LoginWithProductCode", new object[] {
                        userId,
                        password,
                        productCode,
                        module,
                        sessionId,
                        useSAML}, this.LoginWithProductCodeOperationCompleted, userState);
        }
        
        private void OnLoginWithProductCodeOperationCompleted(object arg) {
            if ((this.LoginWithProductCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginWithProductCodeCompleted(this, new LoginWithProductCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/Logout", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Logout() {
            object[] results = this.Invoke("Logout", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LogoutAsync() {
            this.LogoutAsync(null);
        }
        
        /// <remarks/>
        public void LogoutAsync(object userState) {
            if ((this.LogoutOperationCompleted == null)) {
                this.LogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutOperationCompleted);
            }
            this.InvokeAsync("Logout", new object[0], this.LogoutOperationCompleted, userState);
        }
        
        private void OnLogoutOperationCompleted(object arg) {
            if ((this.LogoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoutCompleted(this, new LogoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/MobileLogout", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MobileLogout() {
            object[] results = this.Invoke("MobileLogout", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MobileLogoutAsync() {
            this.MobileLogoutAsync(null);
        }
        
        /// <remarks/>
        public void MobileLogoutAsync(object userState) {
            if ((this.MobileLogoutOperationCompleted == null)) {
                this.MobileLogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMobileLogoutOperationCompleted);
            }
            this.InvokeAsync("MobileLogout", new object[0], this.MobileLogoutOperationCompleted, userState);
        }
        
        private void OnMobileLogoutOperationCompleted(object arg) {
            if ((this.MobileLogoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MobileLogoutCompleted(this, new MobileLogoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetiCherwellCredentialsMode", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetiCherwellCredentialsMode() {
            object[] results = this.Invoke("GetiCherwellCredentialsMode", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetiCherwellCredentialsModeAsync() {
            this.GetiCherwellCredentialsModeAsync(null);
        }
        
        /// <remarks/>
        public void GetiCherwellCredentialsModeAsync(object userState) {
            if ((this.GetiCherwellCredentialsModeOperationCompleted == null)) {
                this.GetiCherwellCredentialsModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetiCherwellCredentialsModeOperationCompleted);
            }
            this.InvokeAsync("GetiCherwellCredentialsMode", new object[0], this.GetiCherwellCredentialsModeOperationCompleted, userState);
        }
        
        private void OnGetiCherwellCredentialsModeOperationCompleted(object arg) {
            if ((this.GetiCherwellCredentialsModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetiCherwellCredentialsModeCompleted(this, new GetiCherwellCredentialsModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetServiceInfo", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceInfo() {
            object[] results = this.Invoke("GetServiceInfo", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceInfoAsync() {
            this.GetServiceInfoAsync(null);
        }
        
        /// <remarks/>
        public void GetServiceInfoAsync(object userState) {
            if ((this.GetServiceInfoOperationCompleted == null)) {
                this.GetServiceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceInfoOperationCompleted);
            }
            this.InvokeAsync("GetServiceInfo", new object[0], this.GetServiceInfoOperationCompleted, userState);
        }
        
        private void OnGetServiceInfoOperationCompleted(object arg) {
            if ((this.GetServiceInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceInfoCompleted(this, new GetServiceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetLastError", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLastError() {
            object[] results = this.Invoke("GetLastError", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastErrorAsync() {
            this.GetLastErrorAsync(null);
        }
        
        /// <remarks/>
        public void GetLastErrorAsync(object userState) {
            if ((this.GetLastErrorOperationCompleted == null)) {
                this.GetLastErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastErrorOperationCompleted);
            }
            this.InvokeAsync("GetLastError", new object[0], this.GetLastErrorOperationCompleted, userState);
        }
        
        private void OnGetLastErrorOperationCompleted(object arg) {
            if ((this.GetLastErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastErrorCompleted(this, new GetLastErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetLastError2", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("errMsg1")]
        public string GetLastError2(out string errMsg2) {
            object[] results = this.Invoke("GetLastError2", new object[0]);
            errMsg2 = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastError2Async() {
            this.GetLastError2Async(null);
        }
        
        /// <remarks/>
        public void GetLastError2Async(object userState) {
            if ((this.GetLastError2OperationCompleted == null)) {
                this.GetLastError2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastError2OperationCompleted);
            }
            this.InvokeAsync("GetLastError2", new object[0], this.GetLastError2OperationCompleted, userState);
        }
        
        private void OnGetLastError2OperationCompleted(object arg) {
            if ((this.GetLastError2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastError2Completed(this, new GetLastError2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetBusinessObjectDefinition", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBusinessObjectDefinition(string nameOrId) {
            object[] results = this.Invoke("GetBusinessObjectDefinition", new object[] {
                        nameOrId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBusinessObjectDefinitionAsync(string nameOrId) {
            this.GetBusinessObjectDefinitionAsync(nameOrId, null);
        }
        
        /// <remarks/>
        public void GetBusinessObjectDefinitionAsync(string nameOrId, object userState) {
            if ((this.GetBusinessObjectDefinitionOperationCompleted == null)) {
                this.GetBusinessObjectDefinitionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBusinessObjectDefinitionOperationCompleted);
            }
            this.InvokeAsync("GetBusinessObjectDefinition", new object[] {
                        nameOrId}, this.GetBusinessObjectDefinitionOperationCompleted, userState);
        }
        
        private void OnGetBusinessObjectDefinitionOperationCompleted(object arg) {
            if ((this.GetBusinessObjectDefinitionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBusinessObjectDefinitionCompleted(this, new GetBusinessObjectDefinitionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/QueryByFieldValue", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryByFieldValue(string busObNameOrId, string fieldNameOrId, string value) {
            object[] results = this.Invoke("QueryByFieldValue", new object[] {
                        busObNameOrId,
                        fieldNameOrId,
                        value});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryByFieldValueAsync(string busObNameOrId, string fieldNameOrId, string value) {
            this.QueryByFieldValueAsync(busObNameOrId, fieldNameOrId, value, null);
        }
        
        /// <remarks/>
        public void QueryByFieldValueAsync(string busObNameOrId, string fieldNameOrId, string value, object userState) {
            if ((this.QueryByFieldValueOperationCompleted == null)) {
                this.QueryByFieldValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryByFieldValueOperationCompleted);
            }
            this.InvokeAsync("QueryByFieldValue", new object[] {
                        busObNameOrId,
                        fieldNameOrId,
                        value}, this.QueryByFieldValueOperationCompleted, userState);
        }
        
        private void OnQueryByFieldValueOperationCompleted(object arg) {
            if ((this.QueryByFieldValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryByFieldValueCompleted(this, new QueryByFieldValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/QueryByStoredQuery", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryByStoredQuery(string busObNameOrId, string queryNameOrId) {
            object[] results = this.Invoke("QueryByStoredQuery", new object[] {
                        busObNameOrId,
                        queryNameOrId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryByStoredQueryAsync(string busObNameOrId, string queryNameOrId) {
            this.QueryByStoredQueryAsync(busObNameOrId, queryNameOrId, null);
        }
        
        /// <remarks/>
        public void QueryByStoredQueryAsync(string busObNameOrId, string queryNameOrId, object userState) {
            if ((this.QueryByStoredQueryOperationCompleted == null)) {
                this.QueryByStoredQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryByStoredQueryOperationCompleted);
            }
            this.InvokeAsync("QueryByStoredQuery", new object[] {
                        busObNameOrId,
                        queryNameOrId}, this.QueryByStoredQueryOperationCompleted, userState);
        }
        
        private void OnQueryByStoredQueryOperationCompleted(object arg) {
            if ((this.QueryByStoredQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryByStoredQueryCompleted(this, new QueryByStoredQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/QueryByStoredQueryWithScope", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryByStoredQueryWithScope(string busObNameOrId, string queryNameOrId, string scope, string scopeOwner) {
            object[] results = this.Invoke("QueryByStoredQueryWithScope", new object[] {
                        busObNameOrId,
                        queryNameOrId,
                        scope,
                        scopeOwner});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryByStoredQueryWithScopeAsync(string busObNameOrId, string queryNameOrId, string scope, string scopeOwner) {
            this.QueryByStoredQueryWithScopeAsync(busObNameOrId, queryNameOrId, scope, scopeOwner, null);
        }
        
        /// <remarks/>
        public void QueryByStoredQueryWithScopeAsync(string busObNameOrId, string queryNameOrId, string scope, string scopeOwner, object userState) {
            if ((this.QueryByStoredQueryWithScopeOperationCompleted == null)) {
                this.QueryByStoredQueryWithScopeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryByStoredQueryWithScopeOperationCompleted);
            }
            this.InvokeAsync("QueryByStoredQueryWithScope", new object[] {
                        busObNameOrId,
                        queryNameOrId,
                        scope,
                        scopeOwner}, this.QueryByStoredQueryWithScopeOperationCompleted, userState);
        }
        
        private void OnQueryByStoredQueryWithScopeOperationCompleted(object arg) {
            if ((this.QueryByStoredQueryWithScopeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryByStoredQueryWithScopeCompleted(this, new QueryByStoredQueryWithScopeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetBusinessObject", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBusinessObject(string busObNameOrId, string busObRecId, bool includeHtmlFields) {
            object[] results = this.Invoke("GetBusinessObject", new object[] {
                        busObNameOrId,
                        busObRecId,
                        includeHtmlFields});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBusinessObjectAsync(string busObNameOrId, string busObRecId, bool includeHtmlFields) {
            this.GetBusinessObjectAsync(busObNameOrId, busObRecId, includeHtmlFields, null);
        }
        
        /// <remarks/>
        public void GetBusinessObjectAsync(string busObNameOrId, string busObRecId, bool includeHtmlFields, object userState) {
            if ((this.GetBusinessObjectOperationCompleted == null)) {
                this.GetBusinessObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBusinessObjectOperationCompleted);
            }
            this.InvokeAsync("GetBusinessObject", new object[] {
                        busObNameOrId,
                        busObRecId,
                        includeHtmlFields}, this.GetBusinessObjectOperationCompleted, userState);
        }
        
        private void OnGetBusinessObjectOperationCompleted(object arg) {
            if ((this.GetBusinessObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBusinessObjectCompleted(this, new GetBusinessObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetBusinessObjectByPublicId", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBusinessObjectByPublicId(string busObNameOrId, string busObPublicId, bool includeHtmlFields) {
            object[] results = this.Invoke("GetBusinessObjectByPublicId", new object[] {
                        busObNameOrId,
                        busObPublicId,
                        includeHtmlFields});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBusinessObjectByPublicIdAsync(string busObNameOrId, string busObPublicId, bool includeHtmlFields) {
            this.GetBusinessObjectByPublicIdAsync(busObNameOrId, busObPublicId, includeHtmlFields, null);
        }
        
        /// <remarks/>
        public void GetBusinessObjectByPublicIdAsync(string busObNameOrId, string busObPublicId, bool includeHtmlFields, object userState) {
            if ((this.GetBusinessObjectByPublicIdOperationCompleted == null)) {
                this.GetBusinessObjectByPublicIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBusinessObjectByPublicIdOperationCompleted);
            }
            this.InvokeAsync("GetBusinessObjectByPublicId", new object[] {
                        busObNameOrId,
                        busObPublicId,
                        includeHtmlFields}, this.GetBusinessObjectByPublicIdOperationCompleted, userState);
        }
        
        private void OnGetBusinessObjectByPublicIdOperationCompleted(object arg) {
            if ((this.GetBusinessObjectByPublicIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBusinessObjectByPublicIdCompleted(this, new GetBusinessObjectByPublicIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/CreateBusinessObject", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateBusinessObject(string busObNameOrId, string creationXml) {
            object[] results = this.Invoke("CreateBusinessObject", new object[] {
                        busObNameOrId,
                        creationXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateBusinessObjectAsync(string busObNameOrId, string creationXml) {
            this.CreateBusinessObjectAsync(busObNameOrId, creationXml, null);
        }
        
        /// <remarks/>
        public void CreateBusinessObjectAsync(string busObNameOrId, string creationXml, object userState) {
            if ((this.CreateBusinessObjectOperationCompleted == null)) {
                this.CreateBusinessObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateBusinessObjectOperationCompleted);
            }
            this.InvokeAsync("CreateBusinessObject", new object[] {
                        busObNameOrId,
                        creationXml}, this.CreateBusinessObjectOperationCompleted, userState);
        }
        
        private void OnCreateBusinessObjectOperationCompleted(object arg) {
            if ((this.CreateBusinessObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateBusinessObjectCompleted(this, new CreateBusinessObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/UpdateBusinessObject", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateBusinessObject(string busObNameOrId, string busObRecId, string updateXml) {
            object[] results = this.Invoke("UpdateBusinessObject", new object[] {
                        busObNameOrId,
                        busObRecId,
                        updateXml});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateBusinessObjectAsync(string busObNameOrId, string busObRecId, string updateXml) {
            this.UpdateBusinessObjectAsync(busObNameOrId, busObRecId, updateXml, null);
        }
        
        /// <remarks/>
        public void UpdateBusinessObjectAsync(string busObNameOrId, string busObRecId, string updateXml, object userState) {
            if ((this.UpdateBusinessObjectOperationCompleted == null)) {
                this.UpdateBusinessObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBusinessObjectOperationCompleted);
            }
            this.InvokeAsync("UpdateBusinessObject", new object[] {
                        busObNameOrId,
                        busObRecId,
                        updateXml}, this.UpdateBusinessObjectOperationCompleted, userState);
        }
        
        private void OnUpdateBusinessObjectOperationCompleted(object arg) {
            if ((this.UpdateBusinessObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBusinessObjectCompleted(this, new UpdateBusinessObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/UpdateBusinessObjectByPublicId", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateBusinessObjectByPublicId(string busObNameOrId, string busObPublicId, string updateXml) {
            object[] results = this.Invoke("UpdateBusinessObjectByPublicId", new object[] {
                        busObNameOrId,
                        busObPublicId,
                        updateXml});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateBusinessObjectByPublicIdAsync(string busObNameOrId, string busObPublicId, string updateXml) {
            this.UpdateBusinessObjectByPublicIdAsync(busObNameOrId, busObPublicId, updateXml, null);
        }
        
        /// <remarks/>
        public void UpdateBusinessObjectByPublicIdAsync(string busObNameOrId, string busObPublicId, string updateXml, object userState) {
            if ((this.UpdateBusinessObjectByPublicIdOperationCompleted == null)) {
                this.UpdateBusinessObjectByPublicIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBusinessObjectByPublicIdOperationCompleted);
            }
            this.InvokeAsync("UpdateBusinessObjectByPublicId", new object[] {
                        busObNameOrId,
                        busObPublicId,
                        updateXml}, this.UpdateBusinessObjectByPublicIdOperationCompleted, userState);
        }
        
        private void OnUpdateBusinessObjectByPublicIdOperationCompleted(object arg) {
            if ((this.UpdateBusinessObjectByPublicIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBusinessObjectByPublicIdCompleted(this, new UpdateBusinessObjectByPublicIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetApiVersion", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetApiVersion() {
            object[] results = this.Invoke("GetApiVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetApiVersionAsync() {
            this.GetApiVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetApiVersionAsync(object userState) {
            if ((this.GetApiVersionOperationCompleted == null)) {
                this.GetApiVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApiVersionOperationCompleted);
            }
            this.InvokeAsync("GetApiVersion", new object[0], this.GetApiVersionOperationCompleted, userState);
        }
        
        private void OnGetApiVersionOperationCompleted(object arg) {
            if ((this.GetApiVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetApiVersionCompleted(this, new GetApiVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/ConfirmLogin", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ConfirmLogin(string userId, string password) {
            object[] results = this.Invoke("ConfirmLogin", new object[] {
                        userId,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ConfirmLoginAsync(string userId, string password) {
            this.ConfirmLoginAsync(userId, password, null);
        }
        
        /// <remarks/>
        public void ConfirmLoginAsync(string userId, string password, object userState) {
            if ((this.ConfirmLoginOperationCompleted == null)) {
                this.ConfirmLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConfirmLoginOperationCompleted);
            }
            this.InvokeAsync("ConfirmLogin", new object[] {
                        userId,
                        password}, this.ConfirmLoginOperationCompleted, userState);
        }
        
        private void OnConfirmLoginOperationCompleted(object arg) {
            if ((this.ConfirmLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConfirmLoginCompleted(this, new ConfirmLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetTabBarOptions", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTabBarOptions(bool iPhoneImages) {
            object[] results = this.Invoke("GetTabBarOptions", new object[] {
                        iPhoneImages});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTabBarOptionsAsync(bool iPhoneImages) {
            this.GetTabBarOptionsAsync(iPhoneImages, null);
        }
        
        /// <remarks/>
        public void GetTabBarOptionsAsync(bool iPhoneImages, object userState) {
            if ((this.GetTabBarOptionsOperationCompleted == null)) {
                this.GetTabBarOptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTabBarOptionsOperationCompleted);
            }
            this.InvokeAsync("GetTabBarOptions", new object[] {
                        iPhoneImages}, this.GetTabBarOptionsOperationCompleted, userState);
        }
        
        private void OnGetTabBarOptionsOperationCompleted(object arg) {
            if ((this.GetTabBarOptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTabBarOptionsCompleted(this, new GetTabBarOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetMruForObject", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMruForObject(string objectType, string objectNameOrId, bool includeSystem, bool forceRefresh) {
            object[] results = this.Invoke("GetMruForObject", new object[] {
                        objectType,
                        objectNameOrId,
                        includeSystem,
                        forceRefresh});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMruForObjectAsync(string objectType, string objectNameOrId, bool includeSystem, bool forceRefresh) {
            this.GetMruForObjectAsync(objectType, objectNameOrId, includeSystem, forceRefresh, null);
        }
        
        /// <remarks/>
        public void GetMruForObjectAsync(string objectType, string objectNameOrId, bool includeSystem, bool forceRefresh, object userState) {
            if ((this.GetMruForObjectOperationCompleted == null)) {
                this.GetMruForObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMruForObjectOperationCompleted);
            }
            this.InvokeAsync("GetMruForObject", new object[] {
                        objectType,
                        objectNameOrId,
                        includeSystem,
                        forceRefresh}, this.GetMruForObjectOperationCompleted, userState);
        }
        
        private void OnGetMruForObjectOperationCompleted(object arg) {
            if ((this.GetMruForObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMruForObjectCompleted(this, new GetMruForObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/ClearMruForObject", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ClearMruForObject(string objectType, string objectNameOrId) {
            this.Invoke("ClearMruForObject", new object[] {
                        objectType,
                        objectNameOrId});
        }
        
        /// <remarks/>
        public void ClearMruForObjectAsync(string objectType, string objectNameOrId) {
            this.ClearMruForObjectAsync(objectType, objectNameOrId, null);
        }
        
        /// <remarks/>
        public void ClearMruForObjectAsync(string objectType, string objectNameOrId, object userState) {
            if ((this.ClearMruForObjectOperationCompleted == null)) {
                this.ClearMruForObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearMruForObjectOperationCompleted);
            }
            this.InvokeAsync("ClearMruForObject", new object[] {
                        objectType,
                        objectNameOrId}, this.ClearMruForObjectOperationCompleted, userState);
        }
        
        private void OnClearMruForObjectOperationCompleted(object arg) {
            if ((this.ClearMruForObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearMruForObjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetItemList", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetItemList(string objectType, string objectNameOrId, string currentLocation, bool forceRefresh) {
            object[] results = this.Invoke("GetItemList", new object[] {
                        objectType,
                        objectNameOrId,
                        currentLocation,
                        forceRefresh});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetItemListAsync(string objectType, string objectNameOrId, string currentLocation, bool forceRefresh) {
            this.GetItemListAsync(objectType, objectNameOrId, currentLocation, forceRefresh, null);
        }
        
        /// <remarks/>
        public void GetItemListAsync(string objectType, string objectNameOrId, string currentLocation, bool forceRefresh, object userState) {
            if ((this.GetItemListOperationCompleted == null)) {
                this.GetItemListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemListOperationCompleted);
            }
            this.InvokeAsync("GetItemList", new object[] {
                        objectType,
                        objectNameOrId,
                        currentLocation,
                        forceRefresh}, this.GetItemListOperationCompleted, userState);
        }
        
        private void OnGetItemListOperationCompleted(object arg) {
            if ((this.GetItemListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemListCompleted(this, new GetItemListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetItemListWithParentInfo", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetItemListWithParentInfo(string objectType, string objectNameOrId, string currentLocation, bool forceRefresh) {
            object[] results = this.Invoke("GetItemListWithParentInfo", new object[] {
                        objectType,
                        objectNameOrId,
                        currentLocation,
                        forceRefresh});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetItemListWithParentInfoAsync(string objectType, string objectNameOrId, string currentLocation, bool forceRefresh) {
            this.GetItemListWithParentInfoAsync(objectType, objectNameOrId, currentLocation, forceRefresh, null);
        }
        
        /// <remarks/>
        public void GetItemListWithParentInfoAsync(string objectType, string objectNameOrId, string currentLocation, bool forceRefresh, object userState) {
            if ((this.GetItemListWithParentInfoOperationCompleted == null)) {
                this.GetItemListWithParentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemListWithParentInfoOperationCompleted);
            }
            this.InvokeAsync("GetItemListWithParentInfo", new object[] {
                        objectType,
                        objectNameOrId,
                        currentLocation,
                        forceRefresh}, this.GetItemListWithParentInfoOperationCompleted, userState);
        }
        
        private void OnGetItemListWithParentInfoOperationCompleted(object arg) {
            if ((this.GetItemListWithParentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemListWithParentInfoCompleted(this, new GetItemListWithParentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetDashboard", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDashboard(string dashboardId, bool alertOnly, bool updateMru, int recordLimit) {
            object[] results = this.Invoke("GetDashboard", new object[] {
                        dashboardId,
                        alertOnly,
                        updateMru,
                        recordLimit});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDashboardAsync(string dashboardId, bool alertOnly, bool updateMru, int recordLimit) {
            this.GetDashboardAsync(dashboardId, alertOnly, updateMru, recordLimit, null);
        }
        
        /// <remarks/>
        public void GetDashboardAsync(string dashboardId, bool alertOnly, bool updateMru, int recordLimit, object userState) {
            if ((this.GetDashboardOperationCompleted == null)) {
                this.GetDashboardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDashboardOperationCompleted);
            }
            this.InvokeAsync("GetDashboard", new object[] {
                        dashboardId,
                        alertOnly,
                        updateMru,
                        recordLimit}, this.GetDashboardOperationCompleted, userState);
        }
        
        private void OnGetDashboardOperationCompleted(object arg) {
            if ((this.GetDashboardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDashboardCompleted(this, new GetDashboardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetDashboardWithSizes", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDashboardWithSizes(string dashboardId, bool alertOnly, bool updateMru, int widgetWidth, int widgetHeight, int recordLimit) {
            object[] results = this.Invoke("GetDashboardWithSizes", new object[] {
                        dashboardId,
                        alertOnly,
                        updateMru,
                        widgetWidth,
                        widgetHeight,
                        recordLimit});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDashboardWithSizesAsync(string dashboardId, bool alertOnly, bool updateMru, int widgetWidth, int widgetHeight, int recordLimit) {
            this.GetDashboardWithSizesAsync(dashboardId, alertOnly, updateMru, widgetWidth, widgetHeight, recordLimit, null);
        }
        
        /// <remarks/>
        public void GetDashboardWithSizesAsync(string dashboardId, bool alertOnly, bool updateMru, int widgetWidth, int widgetHeight, int recordLimit, object userState) {
            if ((this.GetDashboardWithSizesOperationCompleted == null)) {
                this.GetDashboardWithSizesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDashboardWithSizesOperationCompleted);
            }
            this.InvokeAsync("GetDashboardWithSizes", new object[] {
                        dashboardId,
                        alertOnly,
                        updateMru,
                        widgetWidth,
                        widgetHeight,
                        recordLimit}, this.GetDashboardWithSizesOperationCompleted, userState);
        }
        
        private void OnGetDashboardWithSizesOperationCompleted(object arg) {
            if ((this.GetDashboardWithSizesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDashboardWithSizesCompleted(this, new GetDashboardWithSizesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetDashboardViewModels", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDashboardViewModels(string dashboardId, bool alertOnly, bool updateMru, int recordLimit) {
            object[] results = this.Invoke("GetDashboardViewModels", new object[] {
                        dashboardId,
                        alertOnly,
                        updateMru,
                        recordLimit});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDashboardViewModelsAsync(string dashboardId, bool alertOnly, bool updateMru, int recordLimit) {
            this.GetDashboardViewModelsAsync(dashboardId, alertOnly, updateMru, recordLimit, null);
        }
        
        /// <remarks/>
        public void GetDashboardViewModelsAsync(string dashboardId, bool alertOnly, bool updateMru, int recordLimit, object userState) {
            if ((this.GetDashboardViewModelsOperationCompleted == null)) {
                this.GetDashboardViewModelsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDashboardViewModelsOperationCompleted);
            }
            this.InvokeAsync("GetDashboardViewModels", new object[] {
                        dashboardId,
                        alertOnly,
                        updateMru,
                        recordLimit}, this.GetDashboardViewModelsOperationCompleted, userState);
        }
        
        private void OnGetDashboardViewModelsOperationCompleted(object arg) {
            if ((this.GetDashboardViewModelsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDashboardViewModelsCompleted(this, new GetDashboardViewModelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetDashboardDrillDown", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDashboardDrillDown(string dashboardId, string widgetId, string modelJson, string seriesJson, string dataPointJson, int recordLimit) {
            object[] results = this.Invoke("GetDashboardDrillDown", new object[] {
                        dashboardId,
                        widgetId,
                        modelJson,
                        seriesJson,
                        dataPointJson,
                        recordLimit});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDashboardDrillDownAsync(string dashboardId, string widgetId, string modelJson, string seriesJson, string dataPointJson, int recordLimit) {
            this.GetDashboardDrillDownAsync(dashboardId, widgetId, modelJson, seriesJson, dataPointJson, recordLimit, null);
        }
        
        /// <remarks/>
        public void GetDashboardDrillDownAsync(string dashboardId, string widgetId, string modelJson, string seriesJson, string dataPointJson, int recordLimit, object userState) {
            if ((this.GetDashboardDrillDownOperationCompleted == null)) {
                this.GetDashboardDrillDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDashboardDrillDownOperationCompleted);
            }
            this.InvokeAsync("GetDashboardDrillDown", new object[] {
                        dashboardId,
                        widgetId,
                        modelJson,
                        seriesJson,
                        dataPointJson,
                        recordLimit}, this.GetDashboardDrillDownOperationCompleted, userState);
        }
        
        private void OnGetDashboardDrillDownOperationCompleted(object arg) {
            if ((this.GetDashboardDrillDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDashboardDrillDownCompleted(this, new GetDashboardDrillDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetQueryResults", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetQueryResults(string queryId, bool updateMru, int recordLimit, bool allowPromptInfo, double proximityThreshold, bool proximitySortAsc) {
            object[] results = this.Invoke("GetQueryResults", new object[] {
                        queryId,
                        updateMru,
                        recordLimit,
                        allowPromptInfo,
                        proximityThreshold,
                        proximitySortAsc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueryResultsAsync(string queryId, bool updateMru, int recordLimit, bool allowPromptInfo, double proximityThreshold, bool proximitySortAsc) {
            this.GetQueryResultsAsync(queryId, updateMru, recordLimit, allowPromptInfo, proximityThreshold, proximitySortAsc, null);
        }
        
        /// <remarks/>
        public void GetQueryResultsAsync(string queryId, bool updateMru, int recordLimit, bool allowPromptInfo, double proximityThreshold, bool proximitySortAsc, object userState) {
            if ((this.GetQueryResultsOperationCompleted == null)) {
                this.GetQueryResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryResultsOperationCompleted);
            }
            this.InvokeAsync("GetQueryResults", new object[] {
                        queryId,
                        updateMru,
                        recordLimit,
                        allowPromptInfo,
                        proximityThreshold,
                        proximitySortAsc}, this.GetQueryResultsOperationCompleted, userState);
        }
        
        private void OnGetQueryResultsOperationCompleted(object arg) {
            if ((this.GetQueryResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueryResultsCompleted(this, new GetQueryResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetQueryResultsUsingPromptInfo", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetQueryResultsUsingPromptInfo(string queryId, bool updateMru, int recordLimit, string queryInputs, double proximityThreshold, bool proximitySortAsc) {
            object[] results = this.Invoke("GetQueryResultsUsingPromptInfo", new object[] {
                        queryId,
                        updateMru,
                        recordLimit,
                        queryInputs,
                        proximityThreshold,
                        proximitySortAsc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueryResultsUsingPromptInfoAsync(string queryId, bool updateMru, int recordLimit, string queryInputs, double proximityThreshold, bool proximitySortAsc) {
            this.GetQueryResultsUsingPromptInfoAsync(queryId, updateMru, recordLimit, queryInputs, proximityThreshold, proximitySortAsc, null);
        }
        
        /// <remarks/>
        public void GetQueryResultsUsingPromptInfoAsync(string queryId, bool updateMru, int recordLimit, string queryInputs, double proximityThreshold, bool proximitySortAsc, object userState) {
            if ((this.GetQueryResultsUsingPromptInfoOperationCompleted == null)) {
                this.GetQueryResultsUsingPromptInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryResultsUsingPromptInfoOperationCompleted);
            }
            this.InvokeAsync("GetQueryResultsUsingPromptInfo", new object[] {
                        queryId,
                        updateMru,
                        recordLimit,
                        queryInputs,
                        proximityThreshold,
                        proximitySortAsc}, this.GetQueryResultsUsingPromptInfoOperationCompleted, userState);
        }
        
        private void OnGetQueryResultsUsingPromptInfoOperationCompleted(object arg) {
            if ((this.GetQueryResultsUsingPromptInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueryResultsUsingPromptInfoCompleted(this, new GetQueryResultsUsingPromptInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetResultsListWidgetRecords", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetResultsListWidgetRecords(string widgetId, string widgetScope, string widgetScopeOwner, int recordLimit) {
            object[] results = this.Invoke("GetResultsListWidgetRecords", new object[] {
                        widgetId,
                        widgetScope,
                        widgetScopeOwner,
                        recordLimit});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultsListWidgetRecordsAsync(string widgetId, string widgetScope, string widgetScopeOwner, int recordLimit) {
            this.GetResultsListWidgetRecordsAsync(widgetId, widgetScope, widgetScopeOwner, recordLimit, null);
        }
        
        /// <remarks/>
        public void GetResultsListWidgetRecordsAsync(string widgetId, string widgetScope, string widgetScopeOwner, int recordLimit, object userState) {
            if ((this.GetResultsListWidgetRecordsOperationCompleted == null)) {
                this.GetResultsListWidgetRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultsListWidgetRecordsOperationCompleted);
            }
            this.InvokeAsync("GetResultsListWidgetRecords", new object[] {
                        widgetId,
                        widgetScope,
                        widgetScopeOwner,
                        recordLimit}, this.GetResultsListWidgetRecordsOperationCompleted, userState);
        }
        
        private void OnGetResultsListWidgetRecordsOperationCompleted(object arg) {
            if ((this.GetResultsListWidgetRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultsListWidgetRecordsCompleted(this, new GetResultsListWidgetRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetItemDisplayHtml", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetItemDisplayHtml(string objectType, string objectNameOrId, string recId, bool includeActions, string actionCargo) {
            object[] results = this.Invoke("GetItemDisplayHtml", new object[] {
                        objectType,
                        objectNameOrId,
                        recId,
                        includeActions,
                        actionCargo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetItemDisplayHtmlAsync(string objectType, string objectNameOrId, string recId, bool includeActions, string actionCargo) {
            this.GetItemDisplayHtmlAsync(objectType, objectNameOrId, recId, includeActions, actionCargo, null);
        }
        
        /// <remarks/>
        public void GetItemDisplayHtmlAsync(string objectType, string objectNameOrId, string recId, bool includeActions, string actionCargo, object userState) {
            if ((this.GetItemDisplayHtmlOperationCompleted == null)) {
                this.GetItemDisplayHtmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemDisplayHtmlOperationCompleted);
            }
            this.InvokeAsync("GetItemDisplayHtml", new object[] {
                        objectType,
                        objectNameOrId,
                        recId,
                        includeActions,
                        actionCargo}, this.GetItemDisplayHtmlOperationCompleted, userState);
        }
        
        private void OnGetItemDisplayHtmlOperationCompleted(object arg) {
            if ((this.GetItemDisplayHtmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemDisplayHtmlCompleted(this, new GetItemDisplayHtmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/RunOneStep", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RunOneStep(string objectNameOrId, string recId, string scope, string scopeOwner, string oneStepNameOrId, string prompts) {
            object[] results = this.Invoke("RunOneStep", new object[] {
                        objectNameOrId,
                        recId,
                        scope,
                        scopeOwner,
                        oneStepNameOrId,
                        prompts});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RunOneStepAsync(string objectNameOrId, string recId, string scope, string scopeOwner, string oneStepNameOrId, string prompts) {
            this.RunOneStepAsync(objectNameOrId, recId, scope, scopeOwner, oneStepNameOrId, prompts, null);
        }
        
        /// <remarks/>
        public void RunOneStepAsync(string objectNameOrId, string recId, string scope, string scopeOwner, string oneStepNameOrId, string prompts, object userState) {
            if ((this.RunOneStepOperationCompleted == null)) {
                this.RunOneStepOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunOneStepOperationCompleted);
            }
            this.InvokeAsync("RunOneStep", new object[] {
                        objectNameOrId,
                        recId,
                        scope,
                        scopeOwner,
                        oneStepNameOrId,
                        prompts}, this.RunOneStepOperationCompleted, userState);
        }
        
        private void OnRunOneStepOperationCompleted(object arg) {
            if ((this.RunOneStepCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunOneStepCompleted(this, new RunOneStepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/RunOneStepByPublicId", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RunOneStepByPublicId(string objectNameOrId, string publicId, string scope, string scopeOwner, string oneStepNameOrId, string prompts) {
            object[] results = this.Invoke("RunOneStepByPublicId", new object[] {
                        objectNameOrId,
                        publicId,
                        scope,
                        scopeOwner,
                        oneStepNameOrId,
                        prompts});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RunOneStepByPublicIdAsync(string objectNameOrId, string publicId, string scope, string scopeOwner, string oneStepNameOrId, string prompts) {
            this.RunOneStepByPublicIdAsync(objectNameOrId, publicId, scope, scopeOwner, oneStepNameOrId, prompts, null);
        }
        
        /// <remarks/>
        public void RunOneStepByPublicIdAsync(string objectNameOrId, string publicId, string scope, string scopeOwner, string oneStepNameOrId, string prompts, object userState) {
            if ((this.RunOneStepByPublicIdOperationCompleted == null)) {
                this.RunOneStepByPublicIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunOneStepByPublicIdOperationCompleted);
            }
            this.InvokeAsync("RunOneStepByPublicId", new object[] {
                        objectNameOrId,
                        publicId,
                        scope,
                        scopeOwner,
                        oneStepNameOrId,
                        prompts}, this.RunOneStepByPublicIdOperationCompleted, userState);
        }
        
        private void OnRunOneStepByPublicIdOperationCompleted(object arg) {
            if ((this.RunOneStepByPublicIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunOneStepByPublicIdCompleted(this, new RunOneStepByPublicIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetPromptsForOneStep", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPromptsForOneStep(string objectNameOrId, string recId, string scope, string scopeOwner, string oneStepNameOrId) {
            object[] results = this.Invoke("GetPromptsForOneStep", new object[] {
                        objectNameOrId,
                        recId,
                        scope,
                        scopeOwner,
                        oneStepNameOrId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPromptsForOneStepAsync(string objectNameOrId, string recId, string scope, string scopeOwner, string oneStepNameOrId) {
            this.GetPromptsForOneStepAsync(objectNameOrId, recId, scope, scopeOwner, oneStepNameOrId, null);
        }
        
        /// <remarks/>
        public void GetPromptsForOneStepAsync(string objectNameOrId, string recId, string scope, string scopeOwner, string oneStepNameOrId, object userState) {
            if ((this.GetPromptsForOneStepOperationCompleted == null)) {
                this.GetPromptsForOneStepOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPromptsForOneStepOperationCompleted);
            }
            this.InvokeAsync("GetPromptsForOneStep", new object[] {
                        objectNameOrId,
                        recId,
                        scope,
                        scopeOwner,
                        oneStepNameOrId}, this.GetPromptsForOneStepOperationCompleted, userState);
        }
        
        private void OnGetPromptsForOneStepOperationCompleted(object arg) {
            if ((this.GetPromptsForOneStepCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPromptsForOneStepCompleted(this, new GetPromptsForOneStepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetPromptsForOneStepByPublicId", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPromptsForOneStepByPublicId(string objectNameOrId, string publicId, string scope, string scopeOwner, string oneStepNameOrId) {
            object[] results = this.Invoke("GetPromptsForOneStepByPublicId", new object[] {
                        objectNameOrId,
                        publicId,
                        scope,
                        scopeOwner,
                        oneStepNameOrId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPromptsForOneStepByPublicIdAsync(string objectNameOrId, string publicId, string scope, string scopeOwner, string oneStepNameOrId) {
            this.GetPromptsForOneStepByPublicIdAsync(objectNameOrId, publicId, scope, scopeOwner, oneStepNameOrId, null);
        }
        
        /// <remarks/>
        public void GetPromptsForOneStepByPublicIdAsync(string objectNameOrId, string publicId, string scope, string scopeOwner, string oneStepNameOrId, object userState) {
            if ((this.GetPromptsForOneStepByPublicIdOperationCompleted == null)) {
                this.GetPromptsForOneStepByPublicIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPromptsForOneStepByPublicIdOperationCompleted);
            }
            this.InvokeAsync("GetPromptsForOneStepByPublicId", new object[] {
                        objectNameOrId,
                        publicId,
                        scope,
                        scopeOwner,
                        oneStepNameOrId}, this.GetPromptsForOneStepByPublicIdOperationCompleted, userState);
        }
        
        private void OnGetPromptsForOneStepByPublicIdOperationCompleted(object arg) {
            if ((this.GetPromptsForOneStepByPublicIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPromptsForOneStepByPublicIdCompleted(this, new GetPromptsForOneStepByPublicIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetParametersForAction", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetParametersForAction(string objectNameOrId, string recId, string actionId) {
            object[] results = this.Invoke("GetParametersForAction", new object[] {
                        objectNameOrId,
                        recId,
                        actionId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetParametersForActionAsync(string objectNameOrId, string recId, string actionId) {
            this.GetParametersForActionAsync(objectNameOrId, recId, actionId, null);
        }
        
        /// <remarks/>
        public void GetParametersForActionAsync(string objectNameOrId, string recId, string actionId, object userState) {
            if ((this.GetParametersForActionOperationCompleted == null)) {
                this.GetParametersForActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetParametersForActionOperationCompleted);
            }
            this.InvokeAsync("GetParametersForAction", new object[] {
                        objectNameOrId,
                        recId,
                        actionId}, this.GetParametersForActionOperationCompleted, userState);
        }
        
        private void OnGetParametersForActionOperationCompleted(object arg) {
            if ((this.GetParametersForActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetParametersForActionCompleted(this, new GetParametersForActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/ExecuteAction", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteAction(string objectType, string objectNameOrId, string recId, string actionId, string actionInputs, bool returnNewHtmlOnSuccess, bool returnAvailableActionsOnSuccess, string actionCargo) {
            object[] results = this.Invoke("ExecuteAction", new object[] {
                        objectType,
                        objectNameOrId,
                        recId,
                        actionId,
                        actionInputs,
                        returnNewHtmlOnSuccess,
                        returnAvailableActionsOnSuccess,
                        actionCargo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteActionAsync(string objectType, string objectNameOrId, string recId, string actionId, string actionInputs, bool returnNewHtmlOnSuccess, bool returnAvailableActionsOnSuccess, string actionCargo) {
            this.ExecuteActionAsync(objectType, objectNameOrId, recId, actionId, actionInputs, returnNewHtmlOnSuccess, returnAvailableActionsOnSuccess, actionCargo, null);
        }
        
        /// <remarks/>
        public void ExecuteActionAsync(string objectType, string objectNameOrId, string recId, string actionId, string actionInputs, bool returnNewHtmlOnSuccess, bool returnAvailableActionsOnSuccess, string actionCargo, object userState) {
            if ((this.ExecuteActionOperationCompleted == null)) {
                this.ExecuteActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteActionOperationCompleted);
            }
            this.InvokeAsync("ExecuteAction", new object[] {
                        objectType,
                        objectNameOrId,
                        recId,
                        actionId,
                        actionInputs,
                        returnNewHtmlOnSuccess,
                        returnAvailableActionsOnSuccess,
                        actionCargo}, this.ExecuteActionOperationCompleted, userState);
        }
        
        private void OnExecuteActionOperationCompleted(object arg) {
            if ((this.ExecuteActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteActionCompleted(this, new ExecuteActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/LookupScanCode", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LookupScanCode(string scanCode, string objectNameOrId, string recId, string actionId, string actionCargo) {
            object[] results = this.Invoke("LookupScanCode", new object[] {
                        scanCode,
                        objectNameOrId,
                        recId,
                        actionId,
                        actionCargo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LookupScanCodeAsync(string scanCode, string objectNameOrId, string recId, string actionId, string actionCargo) {
            this.LookupScanCodeAsync(scanCode, objectNameOrId, recId, actionId, actionCargo, null);
        }
        
        /// <remarks/>
        public void LookupScanCodeAsync(string scanCode, string objectNameOrId, string recId, string actionId, string actionCargo, object userState) {
            if ((this.LookupScanCodeOperationCompleted == null)) {
                this.LookupScanCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLookupScanCodeOperationCompleted);
            }
            this.InvokeAsync("LookupScanCode", new object[] {
                        scanCode,
                        objectNameOrId,
                        recId,
                        actionId,
                        actionCargo}, this.LookupScanCodeOperationCompleted, userState);
        }
        
        private void OnLookupScanCodeOperationCompleted(object arg) {
            if ((this.LookupScanCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LookupScanCodeCompleted(this, new LookupScanCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetImages", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetImages(string imageIds, int width, int height) {
            object[] results = this.Invoke("GetImages", new object[] {
                        imageIds,
                        width,
                        height});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetImagesAsync(string imageIds, int width, int height) {
            this.GetImagesAsync(imageIds, width, height, null);
        }
        
        /// <remarks/>
        public void GetImagesAsync(string imageIds, int width, int height, object userState) {
            if ((this.GetImagesOperationCompleted == null)) {
                this.GetImagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImagesOperationCompleted);
            }
            this.InvokeAsync("GetImages", new object[] {
                        imageIds,
                        width,
                        height}, this.GetImagesOperationCompleted, userState);
        }
        
        private void OnGetImagesOperationCompleted(object arg) {
            if ((this.GetImagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImagesCompleted(this, new GetImagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/QueryForWidgetDataAtPos", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryForWidgetDataAtPos(string widgetId, int x, int y, int recordLimit) {
            object[] results = this.Invoke("QueryForWidgetDataAtPos", new object[] {
                        widgetId,
                        x,
                        y,
                        recordLimit});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryForWidgetDataAtPosAsync(string widgetId, int x, int y, int recordLimit) {
            this.QueryForWidgetDataAtPosAsync(widgetId, x, y, recordLimit, null);
        }
        
        /// <remarks/>
        public void QueryForWidgetDataAtPosAsync(string widgetId, int x, int y, int recordLimit, object userState) {
            if ((this.QueryForWidgetDataAtPosOperationCompleted == null)) {
                this.QueryForWidgetDataAtPosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryForWidgetDataAtPosOperationCompleted);
            }
            this.InvokeAsync("QueryForWidgetDataAtPos", new object[] {
                        widgetId,
                        x,
                        y,
                        recordLimit}, this.QueryForWidgetDataAtPosOperationCompleted, userState);
        }
        
        private void OnQueryForWidgetDataAtPosOperationCompleted(object arg) {
            if ((this.QueryForWidgetDataAtPosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryForWidgetDataAtPosCompleted(this, new QueryForWidgetDataAtPosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetAttachmentsForBusinessObject", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAttachmentsForBusinessObject(string busObNameOrId, string busObRecId) {
            object[] results = this.Invoke("GetAttachmentsForBusinessObject", new object[] {
                        busObNameOrId,
                        busObRecId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAttachmentsForBusinessObjectAsync(string busObNameOrId, string busObRecId) {
            this.GetAttachmentsForBusinessObjectAsync(busObNameOrId, busObRecId, null);
        }
        
        /// <remarks/>
        public void GetAttachmentsForBusinessObjectAsync(string busObNameOrId, string busObRecId, object userState) {
            if ((this.GetAttachmentsForBusinessObjectOperationCompleted == null)) {
                this.GetAttachmentsForBusinessObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAttachmentsForBusinessObjectOperationCompleted);
            }
            this.InvokeAsync("GetAttachmentsForBusinessObject", new object[] {
                        busObNameOrId,
                        busObRecId}, this.GetAttachmentsForBusinessObjectOperationCompleted, userState);
        }
        
        private void OnGetAttachmentsForBusinessObjectOperationCompleted(object arg) {
            if ((this.GetAttachmentsForBusinessObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAttachmentsForBusinessObjectCompleted(this, new GetAttachmentsForBusinessObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/GetAttachment", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAttachment(string attachmentId) {
            object[] results = this.Invoke("GetAttachment", new object[] {
                        attachmentId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAttachmentAsync(string attachmentId) {
            this.GetAttachmentAsync(attachmentId, null);
        }
        
        /// <remarks/>
        public void GetAttachmentAsync(string attachmentId, object userState) {
            if ((this.GetAttachmentOperationCompleted == null)) {
                this.GetAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAttachmentOperationCompleted);
            }
            this.InvokeAsync("GetAttachment", new object[] {
                        attachmentId}, this.GetAttachmentOperationCompleted, userState);
        }
        
        private void OnGetAttachmentOperationCompleted(object arg) {
            if ((this.GetAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAttachmentCompleted(this, new GetAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/AddAttachmentToRecord", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddAttachmentToRecord(string busObNameOrId, string busObRecId, string attachmentName, string attachmentData) {
            object[] results = this.Invoke("AddAttachmentToRecord", new object[] {
                        busObNameOrId,
                        busObRecId,
                        attachmentName,
                        attachmentData});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddAttachmentToRecordAsync(string busObNameOrId, string busObRecId, string attachmentName, string attachmentData) {
            this.AddAttachmentToRecordAsync(busObNameOrId, busObRecId, attachmentName, attachmentData, null);
        }
        
        /// <remarks/>
        public void AddAttachmentToRecordAsync(string busObNameOrId, string busObRecId, string attachmentName, string attachmentData, object userState) {
            if ((this.AddAttachmentToRecordOperationCompleted == null)) {
                this.AddAttachmentToRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAttachmentToRecordOperationCompleted);
            }
            this.InvokeAsync("AddAttachmentToRecord", new object[] {
                        busObNameOrId,
                        busObRecId,
                        attachmentName,
                        attachmentData}, this.AddAttachmentToRecordOperationCompleted, userState);
        }
        
        private void OnAddAttachmentToRecordOperationCompleted(object arg) {
            if ((this.AddAttachmentToRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAttachmentToRecordCompleted(this, new AddAttachmentToRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/QueryForWidgetDataAtPosWithSizes", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryForWidgetDataAtPosWithSizes(string widgetId, int x, int y, int widgetWidth, int widgetHeight, int recordLimit) {
            object[] results = this.Invoke("QueryForWidgetDataAtPosWithSizes", new object[] {
                        widgetId,
                        x,
                        y,
                        widgetWidth,
                        widgetHeight,
                        recordLimit});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryForWidgetDataAtPosWithSizesAsync(string widgetId, int x, int y, int widgetWidth, int widgetHeight, int recordLimit) {
            this.QueryForWidgetDataAtPosWithSizesAsync(widgetId, x, y, widgetWidth, widgetHeight, recordLimit, null);
        }
        
        /// <remarks/>
        public void QueryForWidgetDataAtPosWithSizesAsync(string widgetId, int x, int y, int widgetWidth, int widgetHeight, int recordLimit, object userState) {
            if ((this.QueryForWidgetDataAtPosWithSizesOperationCompleted == null)) {
                this.QueryForWidgetDataAtPosWithSizesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryForWidgetDataAtPosWithSizesOperationCompleted);
            }
            this.InvokeAsync("QueryForWidgetDataAtPosWithSizes", new object[] {
                        widgetId,
                        x,
                        y,
                        widgetWidth,
                        widgetHeight,
                        recordLimit}, this.QueryForWidgetDataAtPosWithSizesOperationCompleted, userState);
        }
        
        private void OnQueryForWidgetDataAtPosWithSizesOperationCompleted(object arg) {
            if ((this.QueryForWidgetDataAtPosWithSizesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryForWidgetDataAtPosWithSizesCompleted(this, new QueryForWidgetDataAtPosWithSizesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/QueryForWidgetImage", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryForWidgetImage(string widgetId) {
            object[] results = this.Invoke("QueryForWidgetImage", new object[] {
                        widgetId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryForWidgetImageAsync(string widgetId) {
            this.QueryForWidgetImageAsync(widgetId, null);
        }
        
        /// <remarks/>
        public void QueryForWidgetImageAsync(string widgetId, object userState) {
            if ((this.QueryForWidgetImageOperationCompleted == null)) {
                this.QueryForWidgetImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryForWidgetImageOperationCompleted);
            }
            this.InvokeAsync("QueryForWidgetImage", new object[] {
                        widgetId}, this.QueryForWidgetImageOperationCompleted, userState);
        }
        
        private void OnQueryForWidgetImageOperationCompleted(object arg) {
            if ((this.QueryForWidgetImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryForWidgetImageCompleted(this, new QueryForWidgetImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/QueryForWidgetImageWithSizes", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryForWidgetImageWithSizes(string widgetId, int widgetWidth, int widgetHeight) {
            object[] results = this.Invoke("QueryForWidgetImageWithSizes", new object[] {
                        widgetId,
                        widgetWidth,
                        widgetHeight});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryForWidgetImageWithSizesAsync(string widgetId, int widgetWidth, int widgetHeight) {
            this.QueryForWidgetImageWithSizesAsync(widgetId, widgetWidth, widgetHeight, null);
        }
        
        /// <remarks/>
        public void QueryForWidgetImageWithSizesAsync(string widgetId, int widgetWidth, int widgetHeight, object userState) {
            if ((this.QueryForWidgetImageWithSizesOperationCompleted == null)) {
                this.QueryForWidgetImageWithSizesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryForWidgetImageWithSizesOperationCompleted);
            }
            this.InvokeAsync("QueryForWidgetImageWithSizes", new object[] {
                        widgetId,
                        widgetWidth,
                        widgetHeight}, this.QueryForWidgetImageWithSizesOperationCompleted, userState);
        }
        
        private void OnQueryForWidgetImageWithSizesOperationCompleted(object arg) {
            if ((this.QueryForWidgetImageWithSizesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryForWidgetImageWithSizesCompleted(this, new QueryForWidgetImageWithSizesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/QueryForWidgetViewModel", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryForWidgetViewModel(string widgetId) {
            object[] results = this.Invoke("QueryForWidgetViewModel", new object[] {
                        widgetId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryForWidgetViewModelAsync(string widgetId) {
            this.QueryForWidgetViewModelAsync(widgetId, null);
        }
        
        /// <remarks/>
        public void QueryForWidgetViewModelAsync(string widgetId, object userState) {
            if ((this.QueryForWidgetViewModelOperationCompleted == null)) {
                this.QueryForWidgetViewModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryForWidgetViewModelOperationCompleted);
            }
            this.InvokeAsync("QueryForWidgetViewModel", new object[] {
                        widgetId}, this.QueryForWidgetViewModelOperationCompleted, userState);
        }
        
        private void OnQueryForWidgetViewModelOperationCompleted(object arg) {
            if ((this.QueryForWidgetViewModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryForWidgetViewModelCompleted(this, new QueryForWidgetViewModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://cherwellsoftware.com/QuickSearch", RequestNamespace="http://cherwellsoftware.com", ResponseNamespace="http://cherwellsoftware.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QuickSearch(string busObNameOrId, string searchText, bool nonFinalOnly, bool finalOnly, int timeLimitCount, string timeLimitUnits) {
            object[] results = this.Invoke("QuickSearch", new object[] {
                        busObNameOrId,
                        searchText,
                        nonFinalOnly,
                        finalOnly,
                        timeLimitCount,
                        timeLimitUnits});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QuickSearchAsync(string busObNameOrId, string searchText, bool nonFinalOnly, bool finalOnly, int timeLimitCount, string timeLimitUnits) {
            this.QuickSearchAsync(busObNameOrId, searchText, nonFinalOnly, finalOnly, timeLimitCount, timeLimitUnits, null);
        }
        
        /// <remarks/>
        public void QuickSearchAsync(string busObNameOrId, string searchText, bool nonFinalOnly, bool finalOnly, int timeLimitCount, string timeLimitUnits, object userState) {
            if ((this.QuickSearchOperationCompleted == null)) {
                this.QuickSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuickSearchOperationCompleted);
            }
            this.InvokeAsync("QuickSearch", new object[] {
                        busObNameOrId,
                        searchText,
                        nonFinalOnly,
                        finalOnly,
                        timeLimitCount,
                        timeLimitUnits}, this.QuickSearchOperationCompleted, userState);
        }
        
        private void OnQuickSearchOperationCompleted(object arg) {
            if ((this.QuickSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuickSearchCompleted(this, new QuickSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void PortalLoginCompletedEventHandler(object sender, PortalLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PortalLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PortalLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MobileLoginCompletedEventHandler(object sender, MobileLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MobileLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MobileLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void LoginWithProductCodeCompletedEventHandler(object sender, LoginWithProductCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginWithProductCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginWithProductCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void LogoutCompletedEventHandler(object sender, LogoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MobileLogoutCompletedEventHandler(object sender, MobileLogoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MobileLogoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MobileLogoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetiCherwellCredentialsModeCompletedEventHandler(object sender, GetiCherwellCredentialsModeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetiCherwellCredentialsModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetiCherwellCredentialsModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetServiceInfoCompletedEventHandler(object sender, GetServiceInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetLastErrorCompletedEventHandler(object sender, GetLastErrorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastErrorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastErrorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetLastError2CompletedEventHandler(object sender, GetLastError2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastError2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastError2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg2 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetBusinessObjectDefinitionCompletedEventHandler(object sender, GetBusinessObjectDefinitionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBusinessObjectDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBusinessObjectDefinitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void QueryByFieldValueCompletedEventHandler(object sender, QueryByFieldValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryByFieldValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryByFieldValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void QueryByStoredQueryCompletedEventHandler(object sender, QueryByStoredQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryByStoredQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryByStoredQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void QueryByStoredQueryWithScopeCompletedEventHandler(object sender, QueryByStoredQueryWithScopeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryByStoredQueryWithScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryByStoredQueryWithScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetBusinessObjectCompletedEventHandler(object sender, GetBusinessObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBusinessObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBusinessObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetBusinessObjectByPublicIdCompletedEventHandler(object sender, GetBusinessObjectByPublicIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBusinessObjectByPublicIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBusinessObjectByPublicIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CreateBusinessObjectCompletedEventHandler(object sender, CreateBusinessObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateBusinessObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateBusinessObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UpdateBusinessObjectCompletedEventHandler(object sender, UpdateBusinessObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateBusinessObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateBusinessObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void UpdateBusinessObjectByPublicIdCompletedEventHandler(object sender, UpdateBusinessObjectByPublicIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateBusinessObjectByPublicIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateBusinessObjectByPublicIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetApiVersionCompletedEventHandler(object sender, GetApiVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetApiVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetApiVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ConfirmLoginCompletedEventHandler(object sender, ConfirmLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConfirmLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConfirmLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetTabBarOptionsCompletedEventHandler(object sender, GetTabBarOptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTabBarOptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTabBarOptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetMruForObjectCompletedEventHandler(object sender, GetMruForObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMruForObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMruForObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ClearMruForObjectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetItemListCompletedEventHandler(object sender, GetItemListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItemListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetItemListWithParentInfoCompletedEventHandler(object sender, GetItemListWithParentInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemListWithParentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItemListWithParentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetDashboardCompletedEventHandler(object sender, GetDashboardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDashboardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDashboardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetDashboardWithSizesCompletedEventHandler(object sender, GetDashboardWithSizesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDashboardWithSizesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDashboardWithSizesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetDashboardViewModelsCompletedEventHandler(object sender, GetDashboardViewModelsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDashboardViewModelsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDashboardViewModelsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetDashboardDrillDownCompletedEventHandler(object sender, GetDashboardDrillDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDashboardDrillDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDashboardDrillDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetQueryResultsCompletedEventHandler(object sender, GetQueryResultsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueryResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueryResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetQueryResultsUsingPromptInfoCompletedEventHandler(object sender, GetQueryResultsUsingPromptInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueryResultsUsingPromptInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueryResultsUsingPromptInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetResultsListWidgetRecordsCompletedEventHandler(object sender, GetResultsListWidgetRecordsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultsListWidgetRecordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultsListWidgetRecordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetItemDisplayHtmlCompletedEventHandler(object sender, GetItemDisplayHtmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemDisplayHtmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItemDisplayHtmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void RunOneStepCompletedEventHandler(object sender, RunOneStepCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunOneStepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunOneStepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void RunOneStepByPublicIdCompletedEventHandler(object sender, RunOneStepByPublicIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunOneStepByPublicIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunOneStepByPublicIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetPromptsForOneStepCompletedEventHandler(object sender, GetPromptsForOneStepCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPromptsForOneStepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPromptsForOneStepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetPromptsForOneStepByPublicIdCompletedEventHandler(object sender, GetPromptsForOneStepByPublicIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPromptsForOneStepByPublicIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPromptsForOneStepByPublicIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetParametersForActionCompletedEventHandler(object sender, GetParametersForActionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetParametersForActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetParametersForActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ExecuteActionCompletedEventHandler(object sender, ExecuteActionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void LookupScanCodeCompletedEventHandler(object sender, LookupScanCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LookupScanCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LookupScanCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetImagesCompletedEventHandler(object sender, GetImagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void QueryForWidgetDataAtPosCompletedEventHandler(object sender, QueryForWidgetDataAtPosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryForWidgetDataAtPosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryForWidgetDataAtPosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetAttachmentsForBusinessObjectCompletedEventHandler(object sender, GetAttachmentsForBusinessObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAttachmentsForBusinessObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAttachmentsForBusinessObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetAttachmentCompletedEventHandler(object sender, GetAttachmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void AddAttachmentToRecordCompletedEventHandler(object sender, AddAttachmentToRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAttachmentToRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAttachmentToRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void QueryForWidgetDataAtPosWithSizesCompletedEventHandler(object sender, QueryForWidgetDataAtPosWithSizesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryForWidgetDataAtPosWithSizesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryForWidgetDataAtPosWithSizesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void QueryForWidgetImageCompletedEventHandler(object sender, QueryForWidgetImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryForWidgetImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryForWidgetImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void QueryForWidgetImageWithSizesCompletedEventHandler(object sender, QueryForWidgetImageWithSizesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryForWidgetImageWithSizesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryForWidgetImageWithSizesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void QueryForWidgetViewModelCompletedEventHandler(object sender, QueryForWidgetViewModelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryForWidgetViewModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryForWidgetViewModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void QuickSearchCompletedEventHandler(object sender, QuickSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QuickSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QuickSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591